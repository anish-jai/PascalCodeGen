#BlueJ class context
comment0.target=Scanner
comment0.text=\n\ Scanner\ is\ a\ simple\ scanner\ for\ Compilers\ and\ Interpreters\n\ \n\ @author\ Anish\ Jain\n\ @author\ Ms.\ Datar\n\ @version\ 9/5/23\n\n
comment1.params=inStream
comment1.target=Scanner(java.io.InputStream)
comment1.text=\n\ Scanner\ constructor\ for\ construction\ of\ a\ scanner\ that\ \n\ uses\ an\ InputStream\ object\ for\ input.\ \ \n\ \n\ @param\ inStream\ the\ input\ stream\ to\ use\n
comment10.params=lett
comment10.target=boolean\ isLetter(char)
comment10.text=\n\ The\ isLetter\ method\ returns\ whether\ or\ not\ the\ inputted\ char\ is\n\ a\ letter\ or\ not.\n\ \n\ @param\ lett\ the\ char\ to\ be\ checked\n\ \n\ @return\ true\ if\ lett\ is\ a\ letter;\ otherwise,\n\ \ return\ false\n
comment11.params=whit
comment11.target=boolean\ isWhiteSpace(char)
comment11.text=\n\ The\ isWhiteSpace\ method\ returns\ whether\ or\ not\ the\ inputted\ char\ is\n\ some\ form\ of\ a\ whitespace\ or\ not.\n\ \n\ @param\ whit\ the\ char\ to\ be\ checked\n\ \n\ @return\ true\ if\ whit\ is\ a\ whitespace;\ otherwise,\n\ \ return\ false\n
comment12.params=op
comment12.target=boolean\ isOperator(char)
comment12.text=\n\ The\ isOperator\ method\ returns\ whether\ or\ not\ the\ inputted\ char\ is\n\ an\ operator\ or\ not.\n\ \n\ @param\ op\ the\ char\ to\ be\ checked\n\ \n\ @return\ true\ if\ op\ is\ an\ operator;\ otherwise,\n\ \ return\ false\n
comment13.params=
comment13.target=java.lang.String\ scanNumber()
comment13.text=\n\ This\ method\ scans\ in\ digits\ as\ a\ complete\ number\ until\ a\ non-digit\n\ is\ detected.\ Can\ also\ throw\ a\ ScanErrorException\ if\ necessary.\n\ \n\ @return\ String\ all\ the\ digits\ in\ the\ scanned\ number\n\ \n
comment14.params=
comment14.target=java.lang.String\ scanIdentifier()
comment14.text=\n\ This\ method\ scans\ in\ letters/digits\ as\ a\ complete\ identifier\ until\ a\n\ different\ character\ is\ detected.\ Can\ also\ throw\ a\ \n\ ScanErrorException\ if\ necessary.\n\ \n\ @return\ String\ with\ all\ the\ characters\ of\ the\ scanned\ identifier\n\ \n
comment15.params=
comment15.target=java.lang.String\ scanOperand()
comment15.text=\n\ This\ method\ scans\ in\ an\ operand.\ Can\ also\ throw\ a\ ScanErrorException\ \n\ if\ necessary.\n\ \n\ @return\ String\ with\ the\ scanned\ operand\n\ \n
comment2.params=inString
comment2.target=Scanner(java.lang.String)
comment2.text=\n\ Scanner\ constructor\ for\ constructing\ a\ scanner\ that\ \n\ scans\ a\ given\ input\ string.\ \ It\ sets\ the\ end-of-file\ flag\ an\ then\ reads\n\ the\ first\ character\ of\ the\ input\ string\ into\ the\ instance\ field\ currentChar.\n\ \n\ @param\ inString\ the\ string\ to\ scan\n
comment3.params=
comment3.target=void\ getNextChar()
comment3.text=\n\ The\ getNextChar\ method\ moves\ currentChar\ to\ the\ next\ one\ in\ the\ file.\n\ If\ there\ is\ no\ next\ char,\ sets\ eof\ variable\ to\ true.\n\ \n
comment4.params=expected
comment4.target=void\ eat(char)
comment4.text=\n\ The\ eat\ method\ moves\ the\ currentChar\ to\ the\ next\ position,\ otherwise\n\ throws\ a\ new\ ScanErrorException.\n\ \n\ @param\ expected\ the\ char\ that\ is\ expected\ to\ match\ the\ currentChar\n
comment5.params=
comment5.target=boolean\ hasNext()
comment5.text=\n\ The\ hasNext\ returns\ whether\ or\ not\ the\ file\ has\ another\ character.\n\ \n\ @return\ true\ if\ not\ end\ of\ file\ and\ not\ a\ '.'\ char;\ otherwise\n\ \ return\ false\n
comment6.params=
comment6.target=java.lang.String\ nextToken()
comment6.text=\n\ The\ nextToken\ method\ returns\ the\ next\ token,\ with\ the\ token\ name\ \n\ and\ value.\ Throws\ ScanErrorException\ if\ scan\ doesn't\ work\ properly.\n\ \n\ @return\ String\ a\ Token\ with\ the\ token\ name\ and\ associated\ lexeme.\n
comment7.params=dig
comment7.target=boolean\ isDigit(char)
comment7.text=\n\ The\ isDigit\ method\ returns\ whether\ or\ not\ the\ inputted\ char\ is\n\ a\ digit\ or\ not.\n\ \n\ @param\ dig\ the\ char\ to\ be\ checked\n\ \n\ @return\ true\ if\ dig\ is\ a\ digit;\ otherwise,\n\ \ return\ false\n
comment8.params=
comment8.target=boolean\ isComment()
comment8.text=\n\ The\ isComment\ method\ returns\ whether\ or\ not\ the\ scanner\ is\ currently\n\ at\ a\ double\ front\ slash,\ indicating\ a\ comment.\n\ \n\ @return\ true\ if\ there\ is\ a\ comment;\ otherwise\n\ \ return\ false\n
comment9.params=
comment9.target=java.lang.String\ scanComment()
comment9.text=\n\ The\ scanComment\ method\ eliminates\ the\ entire\ rest\ of\ the\ line\ of\ \n\ code\ starting\ with\ a\ double\ slash,\ since\ the\ scanner\ must\ remove\n\ any\ single-line\ commments.\n\ \n\ @return\ String\ all\ the\ eliminated\ chars.\n
numComments=16
