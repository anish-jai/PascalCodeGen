#BlueJ class context
comment0.target=Parser
comment0.text=\n\ The\ Parser\ classes\ utilizes\ a\ context-free\ grammar\ to\ parse\ through\n\ the\ tokenized\ version\ of\ the\ provided\ code\ given\ by\ the\ scanner.\n\ \n\ This\ updated\ version\ of\ Parser\ uses\ the\ AST\ package\ to\ create\ nodes\n\ for\ AST\ classes.\n\n\ @author\ Anish\ Jain\n\ @author\ Anu\ Datar\n\ \n\ @version\ 10.19.23\n
comment1.params=scan
comment1.target=Parser(scanner.Scanner)
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ Parser\n\ \n\ @param\ scan\ the\ Scanner\ that\ will\ scan\ through\ and\ return\ Tokens\ for\n\ the\ parser\n\ \n
comment2.params=expected
comment2.target=void\ eat(java.lang.String)
comment2.text=\n\ Eats\ the\ current\ token\ if\ it\ matches\ what\ is\ expected\n\ \n\ @param\ expected\ the\ expected\ String\ to\ be\ eaten\n
comment3.params=
comment3.target=ast.Expression\ parseNumber()
comment3.text=\n\ Parses\ the\ number\ that\ is\ in\ the\ current\ token.\n\ \n\ @precondition\:\ current\ token\ is\ an\ integer\n\ @postcondition\:\ number\ token\ has\ been\ eaten\n\ \n\ @return\ Expresion\ expression\ with\ the\ number\n
comment4.params=
comment4.target=ast.Program\ parseProgram()
comment4.text=\n\ Reads/stores\ all\ procedure\ declarations\ and\ then\ calls\ upon\n\ parseStatement\ and\ assigns\ this\ to\ a\ program\ object\ to\ store\ and\ \n\ execute\ the\ code.\ Program\ is\ the\ highest\ level\ object\ in\ the\ grammar.\n\ \n\ \n\ \n\ @return\ Program\ the\ program\ object\ containing\ all\ declared\ functions\n\ \ \ \ \ \ \ \ \ and\ the\ following\ block/statement\ of\ code\ \n
comment5.params=
comment5.target=ast.Statement\ parseStatement()
comment5.text=\n\ Parses\ current\ statement,\ by\ checking\ if\ the\ currentToken\ is\ "BEGIN",\n\ "WRITELN",\ "IF",\ or\ "WHILE".\ Otherwise,\ assumes\ the\ statement\ is\ a\ \n\ variable\ definition.\ Calls\ upon\ parseExpression\ for\ values.\n\ \n\ @return\ Statement\ the\ Statement\ that\ has\ been\ parsed\n
comment6.params=
comment6.target=ast.Expression\ parseFactor()
comment6.text=\n\ Recursively\ parses\ one\ factor,\ accounting\ for\ negative\ signs\ and\ \n\ paranthesis.\ Also,\ checks\ for\ variable\ definitions/names,\ using\ a\ HashMap\n\ to\ replace\ the\ name\ with\ their\ integer\ value.\n\ \n\ Checks\ for\ Procedure\ calls\ as\ well.\ If\ procedure\ is\ present,\ evaluate\n\ each\ parameter\ as\ an\ individual\ expression,\ then\ returns\ new\ \n\ ProcedureCall\ object\ with\ corresponding\ name/parameters.\n\ \n\ @return\ an\ Expression\ representing\ the\ value\ of\ this\ Factor\n
comment7.params=
comment7.target=ast.Expression\ parseTerm()
comment7.text=\n\ Parses\ through\ current\ term,\ dealing\ with\ higher\ precedence\ operations.\ \n\ Calls\ upon\ parseFactor\ once\ multiplication\ and\ division\ has\ been\ accounted\ for.\n\ \n\ \n\ @return\ an\ Expression\ representing\ the\ value\ of\ this\ term\n
comment8.params=
comment8.target=ast.Expression\ parseExpression()
comment8.text=\n\ Parses\ through\ an\ expression,\ accounting\ for\ addition\ and\ subtraction.\n\ Also\ calls\ upon\ parseTerm.\n\ \n\ @return\ an\ Expression\ representing\ the\ value\ of\ this\ expression\n
numComments=9
